from aiogram.filters import CommandStart, Command, or_f
from aiogram import types, Router, F
from filters.chat_types import ChatTypeFilter
from keyboards.reply_kbrd import get_keyboard
from aiogram.utils.formatting import as_list, as_marked_section, Bold


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))



@user_private_router.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        reply_markup=get_keyboard(                             #–î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–¥–µ–ª–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            "–ú–µ–Ω—é",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(2, 2)
        )
    )





@user_private_router.message(or_f(Command("menu"), F.text.lower().contains('–º–µ–Ω—é')))   # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞(–∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∏–ª–∏ —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ª–æ–≤–æ –º–µ–Ω—é
async def menu_command(message: types.Message):
    await message.answer("<b>–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é:</b>")




@user_private_router.message(or_f(Command("about"), F.text.lower().contains("–º–∞–≥–∞–∑–∏–Ω")))
async def menu_command(message: types.Message):
    await message.answer("O –Ω–∞—Å - ")





@user_private_router.message(or_f(Command("payment"), F.text.lower().contains("–æ–ø–ª–∞—Ç")))
async def menu_command(message: types.Message):
    text = as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:"),
        "–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ",
        "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–∫–∞—Ä—Ç–∞/–∫–µ—à)",
        "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
        marker="üí≤"
    )
    await message.answer(text.as_html())                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∞—Ä–∫–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ—Ç–≤–µ—Ç, –∫–∞–∫ html –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ





@user_private_router.message((F.text.lower().contains("–¥–æ—Å—Ç–∞–≤–∫")) | (F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"))
@user_private_router.message(Command("shipping"))
async def menu_command(message: types.Message):
    text = as_list(                                        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —é–∑–µ—Ä—É, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ -------
        as_marked_section(
            Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:"),
            "–ö—É—Ä—å–µ—Ä–æ–º",
            "–°–∞–º–æ–≤—ã–≤–æ–∑",
            "–ü–æ–∫—É—à–∞—é –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
            marker="‚úÖ"
        ),
        as_marked_section(
            Bold("–ù–µ–ª—å–∑—è:"),
            "–£–∫—Ä–ø–æ—á—Ç–∞",
            "–ù–æ–≤–∞—è –ü–æ—á—Ç–∞",
            "–ì–æ–ª—É–±–∏",
            marker="‚ùå"
        ),
        sep="\n----------------------------------------\n"
    )
    await message.answer(text.as_html())






@user_private_router.message(F.location)
async def menu_command(message: types.Message):
    await message.answer("–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))


@user_private_router.message(F.contact)
async def menu_command(message: types.Message):
    await message.answer("–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.contact))
