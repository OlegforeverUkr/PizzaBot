import os

from aiogram.enums import ContentType
from aiogram.filters import CommandStart, Command, or_f
from aiogram import types, Router, F, Bot
from aiogram.types import LabeledPrice, PreCheckoutQuery, Message

from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_qwery import orm_get_all_products, orm_add_to_cart, orm_add_user, orm_get_user_carts, Paginator

from filters.chat_types import ChatTypeFilter
from handlers.menu_processing import get_menu_content
from keyboards.inline_kbrd import get_callback_btns, MenuCallBack
from keyboards.reply_kbrd import get_keyboard
from aiogram.utils.formatting import as_list, as_marked_section, Bold



user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))



@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")

    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)



async def add_to_cart(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):
    user = callback.from_user
    await orm_add_user(
        session,
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        phone=None,
    )
    await orm_add_to_cart(session, user_id=user.id, product_id=callback_data.product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")




@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):

    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        return

    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page=callback_data.page,
        product_id=callback_data.product_id,
        user_id=callback.from_user.id,
    )

    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()



#___________________________________________–î–∞–ª–µ–µ –∏–¥–µ—Ç –æ–ø–ª–∞—Ç–∞_______________________________________

@user_private_router.callback_query(F.data == "order_button")
async def pay_for_product(callback: types.CallbackQuery, session: AsyncSession, bot):
    carts = await orm_get_user_carts(session=session, user_id=callback.from_user.id)

    total_price = round(sum(cart.quantity * cart.product.price for cart in carts), 2)
    product_in_cart = [i.product.name for i in carts]
    photo_pay = 'https://t1.gstatic.com/licensed-image?q=tbn:ANd9GcSVhJ46pOBVylg5_ZnYilSr14xSgJwSZ386f8C6hRKrA0MRiCpn2ozG-Bfcxa3bSdJ-'

    if total_price >= 300:
        cost_delivery = 0
    else:
        cost_delivery = 50

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º",
        description="–ü—Ä–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢–ì –ë–æ—Ç–∞",
        payload="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–Ω—Ñ–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–¥...",
        provider_token=f"{os.getenv('PAY_TOKEN')}",
        currency="UAH",
        prices=[
            LabeledPrice(
                label="–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞",
                amount=total_price*100
            ),
            LabeledPrice(
                label="–î–æ—Å—Ç–∞–≤–∫–∞",
                amount=cost_delivery
            )
        ],
        max_tip_amount=5000,
        suggested_tip_amounts=[1000, 2000, 3000, 4000],
        provider_data=None,
        photo_url=photo_pay,
        photo_size=100,
        photo_width=417,
        photo_height=626,
        need_name=True,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,  # –ú–µ–Ω—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,  # –ó–∞–≤–∏—Å–∏—Ç –ª–∏ –∫–æ–Ω–µ—á–≥–∞—è —Ü–µ–Ω–∞ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        disable_notification=True,  # –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∑–≤—É–∫–∞
        protect_content=False,
        reply_to_message_id=False,  # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        allow_sending_without_reply=True,
        reply_markup=None,  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É(1–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –û–ü–õ–ê–¢–ò–¢–¨)
        request_timeout=30
    )


async def pre_check(pre_check_qwery: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_check_qwery.id, ok=True)



async def succsess_pay(message: Message):
    answ = f"{message.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!"
    await message.answer(answ)




"""
_________________________________–ù–∏–∂–µ –∫–æ–¥ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç_________________________

@user_private_router.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        reply_markup=get_keyboard(                             #–î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–¥–µ–ª–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            "–ú–µ–Ω—é",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(2, 2)
        )
    )





@user_private_router.message(or_f(Command("menu"), F.text.lower().contains('–º–µ–Ω—é')))   # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞(–∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∏–ª–∏ —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ª–æ–≤–æ –º–µ–Ω—é
async def menu_command(message: types.Message, session: AsyncSession):
    await message.answer("<b>–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é:</b>")
    for product in await orm_get_all_products(session=session):               # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ë–î, –ø—Ä–µ–¥–∞–≤–∞—è —Å–µ—Å—Å–∏—é
        await message.answer_photo(
            photo=product.image,                                              # –û—Ç–≤–µ—á–∞–µ–º —é–∑–µ—Ä—É —Ñ–æ—Ç–∫–æ–π –∏–∑ –±–¥, –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É
            caption=f"<strong>{product.name}</strong>\n"
                    f"{product.description}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {round(product.price, 2)}"                  # –û–∫—Ä—É–≥–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ 2—Ö –∑–Ω–∞–∫–æ–≤
        )




@user_private_router.message(or_f(Command("about"), F.text.lower().contains("–º–∞–≥–∞–∑–∏–Ω")))
async def menu_command(message: types.Message):
    await message.answer("O –Ω–∞—Å - ")





@user_private_router.message(or_f(Command("payment"), F.text.lower().contains("–æ–ø–ª–∞—Ç")))
async def menu_command(message: types.Message):
    text = as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:"),
        "–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ",
        "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–∫–∞—Ä—Ç–∞/–∫–µ—à)",
        "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
        marker="üí≤"
    )
    await message.answer(text.as_html())                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∞—Ä–∫–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ—Ç–≤–µ—Ç, –∫–∞–∫ html –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ





@user_private_router.message((F.text.lower().contains("–¥–æ—Å—Ç–∞–≤–∫")) | (F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"))
@user_private_router.message(Command("shipping"))
async def menu_command(message: types.Message):
    text = as_list(                                        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —é–∑–µ—Ä—É, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ -------
        as_marked_section(
            Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:"),
            "–ö—É—Ä—å–µ—Ä–æ–º",
            "–°–∞–º–æ–≤—ã–≤–æ–∑",
            "–ü–æ–∫—É—à–∞—é –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
            marker="‚úÖ"
        ),
        as_marked_section(
            Bold("–ù–µ–ª—å–∑—è:"),
            "–£–∫—Ä–ø–æ—á—Ç–∞",
            "–ù–æ–≤–∞—è –ü–æ—á—Ç–∞",
            "–ì–æ–ª—É–±–∏",
            marker="‚ùå"
        ),
        sep="\n----------------------------------------\n"
    )
    await message.answer(text.as_html())






@user_private_router.message(F.location)
async def menu_command(message: types.Message):
    await message.answer("–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))


@user_private_router.message(F.contact)
async def menu_command(message: types.Message):
    await message.answer("–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.contact))
"""